// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: compiler/scanner.flex

/*============================================================================== 
  Scanner.flex
  Versão ajustada para package "compiler" e compatível com parser CUP.
==============================================================================*/

package compiler;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\1\1\6\2\5\1\7\1\10\1\11\1\5\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\11\23\1\5\1\24\1\25\1\26\1\27\2\5\3\7"+
    "\1\30\1\31\1\32\24\7\1\33\1\5\1\34\1\5"+
    "\1\7\1\5\1\35\1\36\1\7\1\37\1\40\1\41"+
    "\1\7\1\42\1\43\2\7\1\44\1\45\1\46\1\47"+
    "\2\7\1\50\1\51\1\52\1\53\1\54\1\55\3\7"+
    "\1\56\1\57\1\60\1\5\6\0\1\61\32\0\2\5"+
    "\4\7\4\5\1\7\2\5\1\0\7\5\1\7\4\5"+
    "\1\7\5\5\27\7\1\5\37\7\1\5\u01ca\7\4\5"+
    "\14\7\16\5\5\7\7\5\1\7\1\5\1\7\21\5"+
    "\160\0\5\7\1\5\2\7\2\5\4\7\1\5\1\7"+
    "\6\5\1\7\1\5\3\7\1\5\1\7\1\5\24\7"+
    "\1\5\123\7\1\5\213\7\1\5\5\0\2\5\246\7"+
    "\1\5\46\7\2\5\1\7\6\5\51\7\6\5\1\7"+
    "\1\5\55\0\1\5\1\0\1\5\2\0\1\5\2\0"+
    "\1\5\1\0\10\5\33\7\4\5\4\7\15\5\6\0"+
    "\5\5\1\7\4\5\13\0\1\5\1\0\3\5\53\7"+
    "\37\0\4\5\2\7\1\0\143\7\1\5\1\7\10\0"+
    "\1\5\6\0\2\7\2\0\1\5\4\0\2\7\12\0"+
    "\3\7\2\5\1\7\17\5\1\0\1\7\1\0\36\7"+
    "\33\0\2\5\131\7\13\0\1\7\16\5\12\0\41\7"+
    "\11\0\2\7\4\5\1\7\2\5\1\0\30\7\4\0"+
    "\1\7\11\0\1\7\3\0\1\7\5\0\22\5\31\7"+
    "\3\0\4\5\13\7\5\5\30\7\1\5\6\7\1\5"+
    "\2\0\6\5\10\0\52\7\72\0\66\7\3\0\1\7"+
    "\22\0\1\7\7\0\12\7\2\0\2\5\12\0\1\5"+
    "\20\7\3\0\1\5\10\7\2\5\2\7\2\5\26\7"+
    "\1\5\7\7\1\5\1\7\3\5\4\7\2\5\1\0"+
    "\1\7\7\0\2\5\2\0\2\5\3\0\1\7\10\5"+
    "\1\0\4\5\2\7\1\5\3\7\2\0\2\5\12\0"+
    "\4\7\7\5\2\7\1\5\1\0\2\5\3\0\1\5"+
    "\6\7\4\5\2\7\2\5\26\7\1\5\7\7\1\5"+
    "\2\7\1\5\2\7\1\5\2\7\2\5\1\0\1\5"+
    "\5\0\4\5\2\0\2\5\3\0\3\5\1\0\7\5"+
    "\4\7\1\5\1\7\7\5\14\0\3\7\1\0\13\5"+
    "\3\0\1\5\11\7\1\5\3\7\1\5\26\7\1\5"+
    "\7\7\1\5\2\7\1\5\5\7\2\5\1\0\1\7"+
    "\10\0\1\5\3\0\1\5\3\0\2\5\1\7\17\5"+
    "\2\7\2\0\2\5\12\0\1\5\1\7\7\5\1\7"+
    "\6\0\1\5\3\0\1\5\10\7\2\5\2\7\2\5"+
    "\26\7\1\5\7\7\1\5\2\7\1\5\5\7\2\5"+
    "\1\0\1\7\7\0\2\5\2\0\2\5\3\0\7\5"+
    "\3\0\4\5\2\7\1\5\3\7\2\0\2\5\12\0"+
    "\1\5\1\7\20\5\1\0\1\7\1\5\6\7\3\5"+
    "\3\7\1\5\4\7\3\5\2\7\1\5\1\7\1\5"+
    "\2\7\3\5\2\7\3\5\3\7\3\5\14\7\4\5"+
    "\5\0\3\5\3\0\1\5\4\0\2\5\1\7\6\5"+
    "\1\0\16\5\12\0\11\5\1\7\6\5\5\0\10\7"+
    "\1\5\3\7\1\5\27\7\1\5\20\7\2\5\1\0"+
    "\1\7\7\0\1\5\3\0\1\5\4\0\7\5\2\0"+
    "\1\5\3\7\2\5\1\7\2\5\2\7\2\0\2\5"+
    "\12\0\20\5\1\7\3\0\1\5\10\7\1\5\3\7"+
    "\1\5\27\7\1\5\12\7\1\5\5\7\2\5\1\0"+
    "\1\7\7\0\1\5\3\0\1\5\4\0\7\5\2\0"+
    "\6\5\2\7\1\5\2\7\2\0\2\5\12\0\1\5"+
    "\2\7\1\0\14\5\4\0\11\7\1\5\3\7\1\5"+
    "\51\7\2\0\1\7\7\0\1\5\3\0\1\5\4\0"+
    "\1\7\5\5\3\7\1\0\7\5\3\7\2\0\2\5"+
    "\12\0\12\5\6\7\1\5\3\0\1\5\22\7\3\5"+
    "\30\7\1\5\11\7\1\5\1\7\2\5\7\7\3\5"+
    "\1\0\4\5\6\0\1\5\1\0\1\5\10\0\6\5"+
    "\12\0\2\5\2\0\15\5\60\7\1\0\2\7\7\0"+
    "\4\5\10\7\10\0\1\5\12\0\47\5\2\7\1\5"+
    "\1\7\1\5\5\7\1\5\30\7\1\5\1\7\1\5"+
    "\12\7\1\0\2\7\11\0\1\7\2\5\5\7\1\5"+
    "\1\7\1\5\7\0\1\5\12\0\2\5\4\7\40\5"+
    "\1\7\27\5\2\0\6\5\12\0\13\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\2\0\10\7\1\5\44\7"+
    "\4\5\24\0\1\5\2\0\5\7\13\0\1\5\44\0"+
    "\11\5\1\0\71\5\53\7\24\0\1\7\12\0\6\5"+
    "\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0"+
    "\3\7\4\0\15\7\14\0\1\7\17\0\2\5\46\7"+
    "\1\5\1\7\5\5\1\7\2\5\53\7\1\5\115\7"+
    "\1\5\4\7\2\5\7\7\1\5\1\7\1\5\4\7"+
    "\2\5\51\7\1\5\4\7\2\5\41\7\1\5\4\7"+
    "\2\5\7\7\1\5\1\7\1\5\4\7\2\5\17\7"+
    "\1\5\71\7\1\5\4\7\2\5\103\7\2\5\3\0"+
    "\40\5\20\7\20\5\126\7\2\5\6\7\3\5\u016c\7"+
    "\2\5\21\7\1\5\32\7\5\5\113\7\3\5\13\7"+
    "\7\5\22\7\4\0\11\5\23\7\3\0\13\5\22\7"+
    "\2\0\14\5\15\7\1\5\3\7\1\5\2\0\14\5"+
    "\64\7\40\0\3\5\1\7\3\5\2\7\1\0\2\5"+
    "\12\0\41\5\17\0\6\5\131\7\7\5\5\7\2\0"+
    "\42\7\1\0\1\7\5\5\106\7\12\5\37\7\1\5"+
    "\14\0\4\5\14\0\12\5\12\0\36\7\2\5\5\7"+
    "\13\5\54\7\4\5\32\7\6\5\12\0\46\5\27\7"+
    "\5\0\4\5\65\7\12\0\1\5\35\0\2\5\13\0"+
    "\6\5\12\0\15\5\1\7\10\5\16\0\1\5\20\0"+
    "\61\5\5\0\57\7\21\0\10\7\3\5\12\0\21\5"+
    "\11\0\14\5\3\0\36\7\15\0\2\7\12\0\54\7"+
    "\16\0\14\5\44\7\24\0\10\5\12\0\3\5\3\7"+
    "\12\0\44\7\2\5\11\7\7\5\53\7\2\5\3\7"+
    "\20\5\3\0\1\5\25\0\4\7\1\0\6\7\1\0"+
    "\2\7\3\0\1\7\5\5\300\7\100\0\26\7\2\5"+
    "\6\7\2\5\46\7\2\5\6\7\2\5\10\7\1\5"+
    "\1\7\1\5\1\7\1\5\1\7\1\5\37\7\2\5"+
    "\65\7\1\5\7\7\1\5\1\7\3\5\3\7\1\5"+
    "\7\7\3\5\4\7\2\5\6\7\4\5\15\7\5\5"+
    "\3\7\1\5\7\7\16\5\5\0\30\5\2\3\5\0"+
    "\20\5\2\7\23\5\1\7\13\5\5\0\1\5\12\0"+
    "\1\5\1\7\15\5\1\7\20\5\15\7\3\5\41\7"+
    "\17\5\15\0\4\5\1\0\3\5\14\0\21\5\1\7"+
    "\4\5\1\7\2\5\12\7\1\5\1\7\3\5\5\7"+
    "\6\5\1\7\1\5\1\7\1\5\1\7\1\5\4\7"+
    "\1\5\13\7\2\5\4\7\5\5\5\7\4\5\1\7"+
    "\21\5\51\7\u0177\5\345\7\6\5\4\7\3\0\2\7"+
    "\14\5\46\7\1\5\1\7\5\5\1\7\2\5\70\7"+
    "\7\5\1\7\17\5\1\0\27\7\11\5\7\7\1\5"+
    "\7\7\1\5\7\7\1\5\7\7\1\5\7\7\1\5"+
    "\7\7\1\5\7\7\1\5\7\7\1\5\40\0\57\5"+
    "\1\7\325\5\3\7\31\5\11\7\6\0\1\5\5\7"+
    "\2\5\5\7\4\5\126\7\2\5\2\0\2\5\3\7"+
    "\1\5\132\7\1\5\4\7\5\5\53\7\1\5\136\7"+
    "\21\5\40\7\60\5\320\7\100\5\215\7\103\5\56\7"+
    "\2\5\15\7\3\5\20\7\12\0\2\7\24\5\57\7"+
    "\1\0\4\5\12\0\1\5\37\7\2\0\120\7\2\0"+
    "\45\5\11\7\2\5\147\7\2\5\100\7\5\5\2\7"+
    "\1\5\1\7\1\5\5\7\30\5\20\7\1\0\3\7"+
    "\1\0\4\7\1\0\27\7\5\0\4\5\1\0\13\5"+
    "\1\7\7\5\64\7\14\5\2\0\62\7\22\0\12\5"+
    "\12\0\6\5\22\0\6\7\3\5\1\7\1\5\2\7"+
    "\13\0\34\7\10\0\2\5\27\7\15\0\14\5\35\7"+
    "\3\5\4\0\57\7\16\0\16\5\1\7\12\0\6\5"+
    "\5\7\1\0\12\7\12\0\5\7\1\5\51\7\16\0"+
    "\11\5\3\7\1\0\10\7\2\0\2\5\12\0\6\5"+
    "\27\7\3\5\1\7\3\0\62\7\1\0\1\7\3\0"+
    "\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\5"+
    "\3\7\2\5\13\7\5\0\2\5\3\7\2\0\12\5"+
    "\6\7\2\5\6\7\2\5\6\7\11\5\7\7\1\5"+
    "\7\7\1\5\53\7\1\5\16\7\6\5\163\7\10\0"+
    "\1\5\2\0\2\5\12\0\6\5\244\7\14\5\27\7"+
    "\4\5\61\7\4\5\u0100\3\156\7\2\5\152\7\46\5"+
    "\7\7\14\5\5\7\5\5\1\7\1\0\12\7\1\5"+
    "\15\7\1\5\5\7\1\5\1\7\1\5\2\7\1\5"+
    "\2\7\1\5\154\7\41\5\153\7\22\5\100\7\2\5"+
    "\66\7\50\5\15\7\3\5\20\0\20\5\20\0\3\5"+
    "\2\7\30\5\3\7\31\5\1\7\6\5\5\7\1\5"+
    "\207\7\2\5\1\0\4\5\1\7\13\5\12\0\7\5"+
    "\32\7\4\5\1\7\1\5\32\7\13\5\131\7\3\5"+
    "\6\7\2\5\6\7\2\5\6\7\2\5\3\7\3\5"+
    "\2\7\3\5\2\7\22\5\3\0\4\5\14\7\1\5"+
    "\32\7\1\5\23\7\1\5\2\7\1\5\17\7\2\5"+
    "\16\7\42\5\173\7\105\5\65\7\210\5\1\0\202\5"+
    "\35\7\3\5\61\7\17\5\1\0\37\5\40\7\15\5"+
    "\36\7\5\5\46\7\5\0\5\5\36\7\2\5\44\7"+
    "\4\5\10\7\1\5\5\7\52\5\236\7\2\5\12\0"+
    "\6\5\44\7\4\5\44\7\4\5\50\7\10\5\64\7"+
    "\14\5\13\7\1\5\17\7\1\5\7\7\1\5\2\7"+
    "\1\5\13\7\1\5\17\7\1\5\7\7\1\5\2\7"+
    "\103\5\67\7\11\5\26\7\12\5\10\7\30\5\6\7"+
    "\1\5\52\7\1\5\11\7\105\5\6\7\2\5\1\7"+
    "\1\5\54\7\1\5\2\7\3\5\1\7\2\5\27\7"+
    "\12\5\27\7\11\5\37\7\101\5\23\7\1\5\2\7"+
    "\12\5\26\7\12\5\32\7\106\5\70\7\6\5\2\7"+
    "\100\5\1\7\3\0\1\5\2\0\5\5\4\0\4\7"+
    "\1\5\3\7\1\5\35\7\2\5\3\0\4\5\1\0"+
    "\40\5\35\7\3\5\35\7\43\5\10\7\1\5\34\7"+
    "\2\0\31\5\66\7\12\5\26\7\12\5\23\7\15\5"+
    "\22\7\156\5\111\7\67\5\63\7\15\5\63\7\15\5"+
    "\44\7\4\0\10\5\12\0\u0146\5\52\7\1\5\2\0"+
    "\3\5\2\7\113\5\3\0\35\7\12\5\1\7\10\5"+
    "\26\7\13\0\37\5\22\7\4\0\52\5\25\7\33\5"+
    "\27\7\11\5\3\0\65\7\17\0\37\5\13\0\2\7"+
    "\2\0\1\7\11\5\4\0\55\7\13\0\2\5\1\0"+
    "\4\5\1\0\12\5\1\0\2\5\31\7\7\5\12\0"+
    "\6\5\3\0\44\7\16\0\1\5\12\0\4\5\1\7"+
    "\2\0\1\7\10\5\43\7\1\0\2\5\1\7\11\5"+
    "\3\0\60\7\16\0\4\7\4\5\4\0\1\5\14\0"+
    "\1\7\1\5\1\7\43\5\22\7\1\5\31\7\14\0"+
    "\6\5\1\0\2\7\1\0\76\5\7\7\1\5\1\7"+
    "\1\5\4\7\1\5\17\7\1\5\12\7\7\5\57\7"+
    "\14\0\5\5\12\0\6\5\4\0\1\5\10\7\2\5"+
    "\2\7\2\5\26\7\1\5\7\7\1\5\2\7\1\5"+
    "\5\7\1\5\2\0\1\7\7\0\2\5\2\0\2\5"+
    "\3\0\2\5\1\7\6\5\1\0\5\5\5\7\2\0"+
    "\2\5\7\0\3\5\5\0\213\5\65\7\22\0\4\7"+
    "\5\5\12\0\4\5\1\0\3\7\36\5\60\7\24\0"+
    "\2\7\1\5\1\7\10\5\12\0\246\5\57\7\7\0"+
    "\2\5\11\0\27\5\4\7\2\0\42\5\60\7\21\0"+
    "\3\5\1\7\13\5\12\0\46\5\53\7\15\0\1\7"+
    "\7\5\12\0\66\5\33\7\2\5\17\0\4\5\12\0"+
    "\6\5\7\7\271\5\54\7\17\0\145\5\100\7\12\0"+
    "\25\5\10\7\2\5\1\7\2\5\10\7\1\5\2\7"+
    "\1\5\30\7\6\0\1\5\2\0\2\5\4\0\1\7"+
    "\1\0\1\7\2\0\14\5\12\0\106\5\10\7\2\5"+
    "\47\7\7\0\2\5\7\0\1\7\1\5\1\7\1\0"+
    "\33\5\1\7\12\0\50\7\7\0\1\7\4\0\10\5"+
    "\1\0\10\5\1\7\13\0\56\7\20\0\3\5\1\7"+
    "\22\5\111\7\7\5\11\7\1\5\45\7\10\0\1\5"+
    "\10\0\1\7\17\5\12\0\30\5\36\7\2\5\26\0"+
    "\1\5\16\0\111\5\7\7\1\5\2\7\1\5\46\7"+
    "\6\0\3\5\1\0\1\5\2\0\1\5\7\0\1\7"+
    "\1\0\10\5\12\0\6\5\6\7\1\5\2\7\1\5"+
    "\40\7\5\0\1\5\2\0\1\5\5\0\1\7\7\5"+
    "\12\0\u0136\5\23\7\4\0\11\5\2\0\1\7\1\0"+
    "\15\7\1\5\42\7\7\0\3\5\5\0\15\5\12\0"+
    "\126\5\1\7\54\5\4\7\37\5\232\7\146\5\157\7"+
    "\21\5\304\7\u014c\5\141\7\17\5\60\7\21\0\6\7"+
    "\17\0\252\5\107\7\271\5\71\7\7\5\37\7\1\5"+
    "\12\0\6\5\117\7\1\5\12\0\6\5\36\7\2\5"+
    "\5\0\13\5\60\7\7\0\11\5\4\7\14\5\12\0"+
    "\11\5\25\7\5\5\23\7\260\5\100\7\200\5\113\7"+
    "\4\5\1\0\1\7\67\0\7\5\4\0\15\7\100\5"+
    "\2\7\1\5\1\7\1\0\13\5\2\0\16\5\370\7"+
    "\10\5\326\7\52\5\11\7\u01e7\5\4\7\1\5\7\7"+
    "\1\5\2\7\1\5\43\7\17\5\1\7\35\5\3\7"+
    "\2\5\1\7\16\5\4\7\10\5\u018c\7\4\5\153\7"+
    "\5\5\15\7\3\5\11\7\7\5\12\7\3\5\2\0"+
    "\1\5\4\0\134\5\56\0\2\5\27\0\u011e\5\5\0"+
    "\3\5\26\0\2\5\7\0\36\5\4\0\224\5\3\0"+
    "\273\5\125\7\1\5\107\7\1\5\2\7\2\5\1\7"+
    "\2\5\2\7\2\5\4\7\1\5\14\7\1\5\1\7"+
    "\1\5\7\7\1\5\101\7\1\5\4\7\2\5\10\7"+
    "\1\5\7\7\1\5\34\7\1\5\4\7\1\5\5\7"+
    "\1\5\1\7\3\5\7\7\1\5\u0154\7\2\5\31\7"+
    "\1\5\31\7\1\5\37\7\1\5\31\7\1\5\37\7"+
    "\1\5\31\7\1\5\37\7\1\5\31\7\1\5\37\7"+
    "\1\5\31\7\1\5\10\7\2\5\151\0\4\5\62\0"+
    "\10\5\1\0\16\5\1\0\26\5\5\0\1\5\17\0"+
    "\120\5\37\7\6\5\6\7\325\5\7\0\1\5\21\0"+
    "\2\5\7\0\1\5\2\0\1\5\5\0\5\5\76\7"+
    "\41\5\1\0\160\5\55\7\3\5\7\0\7\7\2\5"+
    "\12\0\4\5\1\7\u0141\5\36\7\1\0\21\5\54\7"+
    "\16\0\5\5\1\7\320\5\34\7\16\0\346\5\7\7"+
    "\1\5\4\7\1\5\2\7\1\5\17\7\1\5\305\7"+
    "\13\5\7\0\51\5\104\7\7\0\1\7\4\5\12\0"+
    "\u0156\5\1\7\117\5\4\7\1\5\33\7\1\5\2\7"+
    "\1\5\1\7\2\5\1\7\1\5\12\7\1\5\4\7"+
    "\1\5\1\7\1\5\1\7\6\5\1\7\4\5\1\7"+
    "\1\5\1\7\1\5\1\7\1\5\3\7\1\5\2\7"+
    "\1\5\1\7\2\5\1\7\1\5\1\7\1\5\1\7"+
    "\1\5\1\7\1\5\1\7\1\5\2\7\1\5\1\7"+
    "\2\5\4\7\1\5\7\7\1\5\4\7\1\5\4\7"+
    "\1\5\1\7\1\5\12\7\1\5\21\7\5\5\3\7"+
    "\1\5\5\7\1\5\21\7\u0134\5\12\0\6\5\340\7"+
    "\40\5\72\7\6\5\336\7\2\5\u0182\7\16\5\u0131\7"+
    "\37\5\36\7\342\5\113\7\5\5\u0160\7\121\5\1\0"+
    "\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\11\4\1\24"+
    "\1\1\1\25\1\26\1\27\1\30\1\0\1\2\2\0"+
    "\1\31\1\32\1\33\5\4\1\34\6\4\1\35\1\36"+
    "\1\0\1\30\3\0\1\36\4\4\1\37\1\40\5\4"+
    "\1\0\1\30\1\2\1\4\1\41\2\4\1\42\1\4"+
    "\1\43\1\44\2\4\1\45\1\46\1\4\1\47\1\50"+
    "\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\310\0\62\0\372"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\62\0\u01f4\0\u0226\0\u0258\0\62\0\62"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\62\0\u044c\0\62\0\62\0\62\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0190\0\u0514\0\62\0\62\0\62\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\310\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\62\0\62\0\u076c\0\62\0\u079e\0\u07d0"+
    "\0\u0802\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\310\0\310"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u079e"+
    "\0\u0a5a\0\310\0\u0a8c\0\u0abe\0\310\0\u0af0\0\310\0\310"+
    "\0\u0b22\0\u0b54\0\310\0\310\0\u0b86\0\310\0\310\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\6"+
    "\1\27\1\30\2\6\1\31\1\32\1\33\1\6\1\34"+
    "\1\6\1\35\2\6\1\36\1\6\1\37\1\6\1\40"+
    "\1\41\1\42\1\43\1\44\65\0\1\3\105\0\1\45"+
    "\33\0\1\6\6\0\1\6\12\0\2\6\4\0\3\6"+
    "\2\0\21\6\3\0\1\6\11\0\1\46\72\0\2\47"+
    "\52\0\1\50\4\0\1\51\60\0\1\47\1\0\2\52"+
    "\5\0\1\53\6\0\1\53\41\0\1\47\1\0\2\22"+
    "\5\0\1\53\6\0\1\53\47\0\1\54\61\0\1\55"+
    "\61\0\1\56\33\0\1\6\6\0\1\6\12\0\2\6"+
    "\4\0\3\6\2\0\12\6\1\57\6\6\3\0\2\6"+
    "\6\0\1\6\12\0\2\6\4\0\3\6\2\0\7\6"+
    "\1\60\11\6\3\0\2\6\6\0\1\6\12\0\2\6"+
    "\4\0\3\6\2\0\1\61\6\6\1\62\2\6\1\63"+
    "\6\6\3\0\2\6\6\0\1\6\12\0\2\6\4\0"+
    "\3\6\2\0\4\6\1\64\4\6\1\65\7\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\1\66\20\6\3\0\2\6\6\0\1\6\12\0\2\6"+
    "\4\0\3\6\2\0\3\6\1\67\15\6\3\0\2\6"+
    "\6\0\1\6\12\0\2\6\4\0\3\6\2\0\13\6"+
    "\1\70\5\6\3\0\2\6\6\0\1\6\12\0\2\6"+
    "\4\0\3\6\2\0\12\6\1\71\6\6\3\0\2\6"+
    "\6\0\1\6\12\0\2\6\4\0\3\6\2\0\5\6"+
    "\1\72\13\6\3\0\1\6\57\0\1\73\24\0\2\47"+
    "\4\0\1\74\1\75\1\76\4\0\1\74\1\75\1\76"+
    "\20\0\14\77\1\100\45\77\2\51\1\3\1\51\1\4"+
    "\55\51\15\0\1\101\1\0\1\101\2\0\2\102\36\0"+
    "\1\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\16\6\1\103\2\6\3\0\2\6\6\0\1\6\12\0"+
    "\2\6\4\0\3\6\2\0\14\6\1\104\4\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\7\6\1\105\11\6\3\0\2\6\6\0\1\6\12\0"+
    "\2\6\4\0\3\6\2\0\12\6\1\106\6\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\13\6\1\107\5\6\3\0\2\6\6\0\1\6\12\0"+
    "\2\6\4\0\3\6\2\0\15\6\1\110\3\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\6\6\1\111\12\6\3\0\2\6\6\0\1\6\12\0"+
    "\2\6\4\0\3\6\2\0\15\6\1\112\3\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\16\6\1\113\2\6\3\0\2\6\6\0\1\6\12\0"+
    "\2\6\4\0\3\6\2\0\6\6\1\114\12\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\6\6\1\115\12\6\3\0\1\6\15\0\1\116\1\0"+
    "\1\116\2\0\2\117\36\0\14\77\1\50\45\77\14\50"+
    "\1\100\4\50\1\120\40\50\22\0\2\102\36\0\1\6"+
    "\6\0\1\6\12\0\2\6\4\0\3\6\2\0\1\6"+
    "\1\121\17\6\3\0\2\6\6\0\1\6\12\0\2\6"+
    "\4\0\3\6\2\0\3\6\1\122\15\6\3\0\2\6"+
    "\6\0\1\6\12\0\2\6\4\0\3\6\2\0\14\6"+
    "\1\123\4\6\3\0\2\6\6\0\1\6\12\0\2\6"+
    "\4\0\3\6\2\0\1\124\20\6\3\0\2\6\6\0"+
    "\1\6\12\0\2\6\4\0\3\6\2\0\11\6\1\125"+
    "\7\6\3\0\2\6\6\0\1\6\12\0\2\6\4\0"+
    "\3\6\2\0\16\6\1\126\2\6\3\0\2\6\6\0"+
    "\1\6\12\0\2\6\4\0\3\6\2\0\3\6\1\127"+
    "\15\6\3\0\2\6\6\0\1\6\12\0\2\6\4\0"+
    "\3\6\2\0\2\6\1\130\16\6\3\0\2\6\6\0"+
    "\1\6\12\0\2\6\4\0\3\6\2\0\7\6\1\131"+
    "\11\6\3\0\1\6\22\0\2\117\60\0\2\117\4\0"+
    "\1\74\1\0\1\76\4\0\1\74\1\0\1\76\20\0"+
    "\1\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\7\6\1\132\11\6\3\0\2\6\6\0\1\6\12\0"+
    "\2\6\4\0\3\6\2\0\3\6\1\133\15\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\15\6\1\134\3\6\3\0\2\6\6\0\1\6\12\0"+
    "\2\6\4\0\3\6\2\0\13\6\1\135\5\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\3\6\1\136\15\6\3\0\2\6\6\0\1\6\12\0"+
    "\2\6\4\0\3\6\2\0\3\6\1\137\15\6\3\0"+
    "\2\6\6\0\1\6\12\0\2\6\4\0\3\6\2\0"+
    "\11\6\1\140\7\6\3\0\1\6";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3000];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\1\1\6\11\4\1\1\11"+
    "\3\1\2\11\11\1\1\11\1\1\3\11\1\1\1\0"+
    "\1\1\2\0\3\11\14\1\2\11\1\0\1\11\3\0"+
    "\14\1\1\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  // Métodos auxiliares para criar Symbol
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caractere ilegal: " + yytext());
            }
          // fall through
          case 42: break;
          case 2:
            { /* ignora */
            }
          // fall through
          case 43: break;
          case 3:
            { return symbol(sym.NOT);
            }
          // fall through
          case 44: break;
          case 4:
            { return symbol(sym.IDENTIFIER, yytext());
            }
          // fall through
          case 45: break;
          case 5:
            { return symbol(sym.MOD);
            }
          // fall through
          case 46: break;
          case 6:
            { return symbol(sym.LPAREN);
            }
          // fall through
          case 47: break;
          case 7:
            { return symbol(sym.RPAREN);
            }
          // fall through
          case 48: break;
          case 8:
            { return symbol(sym.MULT);
            }
          // fall through
          case 49: break;
          case 9:
            { return symbol(sym.PLUS);
            }
          // fall through
          case 50: break;
          case 10:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 51: break;
          case 11:
            { return symbol(sym.MINUS);
            }
          // fall through
          case 52: break;
          case 12:
            { return symbol(sym.DIV);
            }
          // fall through
          case 53: break;
          case 13:
            { Integer val = Integer.valueOf(yytext());
                       return symbol(sym.INTEGER_LITERAL, val);
            }
          // fall through
          case 54: break;
          case 14:
            { return symbol(sym.SEMICOLON);
            }
          // fall through
          case 55: break;
          case 15:
            { return symbol(sym.LT);
            }
          // fall through
          case 56: break;
          case 16:
            { return symbol(sym.ASSIGN);
            }
          // fall through
          case 57: break;
          case 17:
            { return symbol(sym.GT);
            }
          // fall through
          case 58: break;
          case 18:
            { return symbol(sym.LBRACKET);
            }
          // fall through
          case 59: break;
          case 19:
            { return symbol(sym.RBRACKET);
            }
          // fall through
          case 60: break;
          case 20:
            { return symbol(sym.LBRACE);
            }
          // fall through
          case 61: break;
          case 21:
            { return symbol(sym.RBRACE);
            }
          // fall through
          case 62: break;
          case 22:
            { return symbol(sym.NE);
            }
          // fall through
          case 63: break;
          case 23:
            { return symbol(sym.AND);
            }
          // fall through
          case 64: break;
          case 24:
            { // Float.parseFloat aceita “3.”, “.5”, “3.14f”, etc.
                       Float val = Float.valueOf(yytext());
                       return symbol(sym.FLOAT_LITERAL, val);
            }
          // fall through
          case 65: break;
          case 25:
            { return symbol(sym.LE);
            }
          // fall through
          case 66: break;
          case 26:
            { return symbol(sym.EQ);
            }
          // fall through
          case 67: break;
          case 27:
            { return symbol(sym.GE);
            }
          // fall through
          case 68: break;
          case 28:
            { return symbol(sym.IF);
            }
          // fall through
          case 69: break;
          case 29:
            { return symbol(sym.OR);
            }
          // fall through
          case 70: break;
          case 30:
            { Double val = Double.valueOf(yytext());
                       return symbol(sym.DOUBLE_LITERAL, val);
            }
          // fall through
          case 71: break;
          case 31:
            { return symbol(sym.FOR);
            }
          // fall through
          case 72: break;
          case 32:
            { return symbol(sym.INT);
            }
          // fall through
          case 73: break;
          case 33:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 74: break;
          case 34:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 75: break;
          case 35:
            { return symbol(sym.TRUE);
            }
          // fall through
          case 76: break;
          case 36:
            { return symbol(sym.VOID);
            }
          // fall through
          case 77: break;
          case 37:
            { return symbol(sym.FALSE);
            }
          // fall through
          case 78: break;
          case 38:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 79: break;
          case 39:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 80: break;
          case 40:
            { return symbol(sym.DOUBLE);
            }
          // fall through
          case 81: break;
          case 41:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
